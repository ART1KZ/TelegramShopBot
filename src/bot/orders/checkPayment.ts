import { ExtendedContext } from "../types";
import { Order, Configuration, Product } from "../../database/models";
import { checkPaymentApi } from "./index";

async function checkPayment(ctx: ExtendedContext, data: string) {
    const lastPaymentCheck = ctx.session.lastPaymentCheck;
    const currentTime = Date.now();
    const minuteInMs = 1000 * 60;

    if (
        lastPaymentCheck &&
        lastPaymentCheck.getTime() + minuteInMs > currentTime
    ) {
        const allowedTimeToCheck = lastPaymentCheck.getTime() + minuteInMs;
        const secondsLeftToCheck = Math.floor(
            (allowedTimeToCheck - currentTime) / 1000
        );
        await ctx.answerCallbackQuery(`–ü–æ–¥–æ–∂–¥–∏—Ç–µ ${secondsLeftToCheck} —Å–µ–∫—É–Ω–¥`);
        return;
    }

    const orderId = data.split("_")[1];
    const order = await Order.findOne({
        _id: orderId,
        status: "pending",
    });

    if (!order) {
        await ctx.answerCallbackQuery("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É");
        return;
    }

    const config = await Configuration.findOne();
    if (!config?.btc_address) {
        await ctx.answerCallbackQuery("–ê–¥—Ä–µ—Å –æ–ø–ª–∞—Ç—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω");
        return;
    }

    const btcAmount = parseFloat(order.btc_amount.toString());
    const paymentResult = await checkPaymentApi(
        config.btc_address,
        btcAmount,
        order.created_at,
        24 // –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
    );
    ctx.session.lastPaymentCheck = new Date();

    if (paymentResult.paid) {
        order.status = "completed";
        order.tx_hash = paymentResult.tx_hash; // —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ö–µ—à–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        await order.save();

        const product = await Product.findById(order.product_id);
        if (product) {
            product.status = "sold";
            product.sold_at = new Date();
            await product.save();

            await ctx.editMessageText(
                `<b>üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!</b>\n` +
                    `<b>üÜî –ó–∞–∫–∞–∑ ‚Ññ:</b> <code>${order._id}</code>\n` +
                    `<b>üíé –í–∞—à —Ç–æ–≤–∞—Ä:</b> <code>${product.data}</code>\n` +
                    `<b>üîó –•—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:</b> <code>${paymentResult.tx_hash}</code>`,
                {
                    reply_markup: {
                        inline_keyboard: [
                            [
                                {
                                    text: "üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                                    callback_data: "menu",
                                },
                            ],
                        ],
                    },
                    parse_mode: "HTML",
                }
            );
        }
    } else {
        await ctx.answerCallbackQuery("–û–ø–ª–∞—Ç–∞ –µ—â—ë –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞");
    }
}

export default checkPayment;
