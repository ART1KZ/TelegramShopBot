import { ExtendedContext } from "../types";
import { Order } from "../../database/models";

async function updateAdminItem(ctx: ExtendedContext, data: string) {
    const parts = data.split("_");
    const type = parts[2];
    const id = parts[3];

    if (type === "city" && id) {
        ctx.session.adminStep = data;
        await ctx.editMessageText("<b>üèôÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:</b>", {
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: "‚ùå –ù–∞–∑–∞–¥",
                            callback_data: `admin_option_city_${id}`,
                        },
                    ],
                ],
            },
            parse_mode: "HTML",
        });
    } else if (type === "password") {
        ctx.session.adminStep = "admin_update_password";
        await ctx.editMessageText(
            `<b>üîë –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å (–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤):</b>\n–ü—Ä–∏–º–µ—Ä: <code>da1s2lKsa!13L_asd2</code>`,
            {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: "‚ùå –ù–∞–∑–∞–¥", callback_data: "admin_config" }],
                    ],
                },
                parse_mode: "HTML",
            }
        );
    } else if (type === "address") {
        const hasPending =
            (await Order.find({ status: "pending" }).countDocuments()) > 0;
        if (hasPending) {
            await ctx.answerCallbackQuery(
                "–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–∞—Ö"
            );
            return;
        }
        ctx.session.adminStep = "admin_update_address";
        await ctx.editMessageText(
            `<b>üí∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å BTC:</b>\n–ü—Ä–∏–º–µ—Ä: <code>1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa</code>`,
            {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: "‚ùå –ù–∞–∑–∞–¥", callback_data: "admin_config" }],
                    ],
                },
                parse_mode: "HTML",
            }
        );
    } else if (type === "product") {
        const groupId = parts[4];
        ctx.session.adminStep = data;
        await ctx.editMessageText(
            "<b>üì¶ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Ç–æ–≤–∞—Ä–∞:</b>\n" +
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <code>–ù–∞–∑–≤–∞–Ω–∏–µ, –¶–µ–Ω–∞ –≤ RUB, –¶–µ–Ω–∞ –≤ BTC, –î–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞</code>\n" +
                "–ü—Ä–∏–º–µ—Ä: <code>–ü–æ–¥–ø–∏—Å–∫–∞ Netflix 1 –º–µ—Å—è—Ü, 1200, 0.0005, NETFLIX-12345-XYZ</code>",
            {
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: "‚ùå –û—Ç–º–µ–Ω–∞",
                                callback_data: `admin_option_product_${id}_${groupId}`,
                            },
                        ],
                    ],
                },
                parse_mode: "HTML",
            }
        );
    }
}

export default updateAdminItem;
