import { Bot, InlineKeyboard, session } from "grammy";
import { City, Product, Transaction, Configuration } from "../database/models";
import { connectToDatabase } from "../database/index";
import { generateUniqueAmount, getUniqueProducts } from "./helpers";
import { ExtendedContext, SessionData } from "./types";
import { sendMainMenu, sendAdminMenu } from "./menus";
import { scheduleTransactionsCleanup } from "./transations";

if (!process.env.TG_BOT_TOKEN) {
    throw new Error("Telegram bot —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω");
}

const bot = new Bot<ExtendedContext>(process.env.TG_BOT_TOKEN);

// –£–¥–∞–ª–µ–Ω–∏–µ –∏—Å—Ç–µ–∫—à–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
scheduleTransactionsCleanup();

async function addRecords() {
    try {
        await connectToDatabase();

        // –°–æ–∑–¥–∞–µ–º –≥–æ—Ä–æ–¥–∞, –µ—Å–ª–∏ –∏—Ö –µ—â–µ –Ω–µ—Ç
        const cities = await City.find();
        if (cities.length === 0) {
            await City.create({ name: "–¢–æ–∫–∏–æ" });
            await City.create({ name: "–õ–æ–Ω–¥–æ–Ω" });
            await City.create({ name: "–ù—å—é-–ô–æ—Ä–∫" });
            await City.create({ name: "–ë–µ—Ä–ª–∏–Ω" });
            await City.create({ name: "–°–∏–¥–Ω–µ–π" });
            await City.create({ name: "–ú–æ—Å–∫–≤–∞" });
            await City.create({ name: "–°–∏–Ω–≥–∞–ø—É—Ä" });
        }

        const citiesIds = (await City.find()).map((city) => city.id);

        const products = await Product.find();
        if (products.length === 0) {
            await Product.create({
                name: "–ü–æ–¥–ø–∏—Å–∫–∞ Netflix 1 –º–µ—Å—è—Ü",
                city_id: citiesIds[0],
                data: "NETFLIX-12345-XYZ",
                btc_price: 0.0005,
                rub_price: 1200,
            });
            await Product.create({
                name: "–õ–∏—Ü–µ–Ω–∑–∏—è Adobe Photoshop",
                city_id: citiesIds[1],
                data: "ADOBE-PS-98765",
                btc_price: 0.015,
                rub_price: 4500,
            });
            await Product.create({
                name: "–ö–ª—é—á Steam $50",
                city_id: citiesIds[2],
                data: "STEAM-50USD-ABCDE",
                btc_price: 0.002,
                rub_price: 4800,
            });
            await Product.create({
                name: "–ü–æ–¥–ø–∏—Å–∫–∞ Spotify Premium",
                city_id: citiesIds[3],
                data: "SPOTIFY-3M-54321",
                btc_price: 0.0004,
                rub_price: 900,
            });
            await Product.create({
                name: "–¶–∏—Ñ—Ä–æ–≤–æ–π –∫–æ–¥ PlayStation Plus",
                city_id: citiesIds[4],
                data: "PSPLUS-12M-XYZ123",
                btc_price: 0.0018,
                rub_price: 3600,
            });
            await Product.create({
                name: "–ö–ª—é—á –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ Windows 11 Pro",
                city_id: citiesIds[5],
                data: "WIN11-PRO-7890-ABC",
                btc_price: 0.003,
                rub_price: 7500,
            });
            await Product.create({
                name: "–ü–æ–¥–ø–∏—Å–∫–∞ Xbox Game Pass",
                city_id: citiesIds[6],
                data: "XBOX-GP-6M-45678",
                btc_price: 0.0012,
                rub_price: 2400,
            });
            await Product.create({
                name: "–¶–∏—Ñ—Ä–æ–≤–æ–π –∫–æ–¥ Amazon $25",
                city_id: citiesIds[0],
                data: "AMAZON-25USD-DEF456",
                btc_price: 0.001,
                rub_price: 2300,
            });
            await Product.create({
                name: "–ö–ª—é—á VPN NordVPN 1 –≥–æ–¥",
                city_id: citiesIds[1],
                data: "NORDVPN-1Y-123XYZ",
                btc_price: 0.0025,
                rub_price: 6000,
            });
            await Product.create({
                name: "–ü–æ–¥–ø–∏—Å–∫–∞ YouTube Premium",
                city_id: citiesIds[2],
                data: "YT-PREM-3M-ABC789",
                btc_price: 0.0006,
                rub_price: 1500,
            });
            await Product.create({
                name: "–õ–∏—Ü–µ–Ω–∑–∏—è Microsoft Office 365",
                city_id: citiesIds[3],
                data: "OFFICE-365-1Y-XYZ987",
                btc_price: 0.0028,
                rub_price: 7000,
            });
            await Product.create({
                name: "–ö–æ–¥ Roblox 1000 Robux",
                city_id: citiesIds[4],
                data: "ROBLOX-1000R-DEF123",
                btc_price: 0.00045,
                rub_price: 1000,
            });
            await Product.create({
                name: "–ü–æ–¥–ø–∏—Å–∫–∞ Discord Nitro",
                city_id: citiesIds[5],
                data: "DISCORD-NITRO-1M-456XYZ",
                btc_price: 0.00035,
                rub_price: 800,
            });
            await Product.create({
                name: "–ö–ª—é—á –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ Kaspersky",
                city_id: citiesIds[6],
                data: "KASPERSKY-1Y-789ABC",
                btc_price: 0.0015,
                rub_price: 3000,
            });
            await Product.create({
                name: "–¶–∏—Ñ—Ä–æ–≤–æ–π –∫–æ–¥ Google Play $10",
                city_id: citiesIds[0],
                data: "GOOGLE-PLAY-10USD-XYZ456",
                btc_price: 0.0004,
                rub_price: 950,
            });
            await Product.create({
                name: "–ö–ª—é—á –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ ESET NOD32",
                city_id: citiesIds[1],
                data: "ESET-NOD32-1Y-ABC123",
                btc_price: 0.0013,
                rub_price: 2800,
            });
            await Product.create({
                name: "–ü–æ–¥–ø–∏—Å–∫–∞ Apple Music 3 –º–µ—Å—è—Ü–∞",
                city_id: citiesIds[2],
                data: "APPLE-MUSIC-3M-DEF789",
                btc_price: 0.0007,
                rub_price: 1600,
            });
            await Product.create({
                name: "–ö–æ–¥ Fortnite 2800 V-Bucks",
                city_id: citiesIds[3],
                data: "FORTNITE-2800VB-XYZ456",
                btc_price: 0.0011,
                rub_price: 2500,
            });
            await Product.create({
                name: "–õ–∏—Ü–µ–Ω–∑–∏—è CorelDRAW",
                city_id: citiesIds[4],
                data: "COREL-DRAW-2023-ABC987",
                btc_price: 0.012,
                rub_price: 4000,
            });
            await Product.create({
                name: "–ü–æ–¥–ø–∏—Å–∫–∞ Twitch Turbo",
                city_id: citiesIds[5],
                data: "TWITCH-TURBO-1M-DEF123",
                btc_price: 0.0003,
                rub_price: 700,
            });
            await Product.create({
                name: "–ö–ª—é—á ak—Ç–∏–≤–∞—Ü–∏–∏ Autodesk AutoCAD",
                city_id: citiesIds[6],
                data: "AUTOCAD-2023-XYZ789",
                btc_price: 0.025,
                rub_price: 9000,
            });
            await Product.create({
                name: "–¶–∏—Ñ—Ä–æ–≤–æ–π –∫–æ–¥ iTunes $15",
                city_id: citiesIds[0],
                data: "ITUNES-15USD-ABC456",
                btc_price: 0.0006,
                rub_price: 1400,
            });
            await Product.create({
                name: "–ü–æ–¥–ø–∏—Å–∫–∞ Paramount+ 1 –º–µ—Å—è—Ü",
                city_id: citiesIds[1],
                data: "PARAMOUNT-1M-DEF789",
                btc_price: 0.00045,
                rub_price: 1100,
            });
            await Product.create({
                name: "–ö–ª—é—á VPN ExpressVPN 6 –º–µ—Å—è—Ü–µ–≤",
                city_id: citiesIds[2],
                data: "EXPRESSVPN-6M-XYZ123",
                btc_price: 0.002,
                rub_price: 4800,
            });
            await Product.create({
                name: "–ö–æ–¥ Minecraft Java Edition",
                city_id: citiesIds[3],
                data: "MINECRAFT-JAVA-ABC789",
                btc_price: 0.0014,
                rub_price: 3200,
            });
        }

        const configCount = await Configuration.countDocuments();

        if (!configCount) {
            await Configuration.create({
                adminPassword: "test",
                btcAddress: "1Q7rzSJm6Su4ymxPJ22EUDktfSLhRPAoN4",
            });
        }
    } catch (e) {
        console.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏:", e);
    }
}

addRecords();

// –ú–∏–¥–ª–≤–∞—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–π
bot.use(
    session({
        initial: (): SessionData => ({
            step: "start",
            cityId: null,
            productId: null,
            botLastMessageId: null,
            isAdmin: null,
            adminStep: null,
            tempProduct: null,
        }),
    })
);

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.command("start", async (ctx) => {
    await sendMainMenu(ctx);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫—É
bot.on("callback_query:data", async (ctx) => {
    const data = ctx.callbackQuery.data;
    const session = ctx.session;

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É "–¢–æ–≤–∞—Ä—ã"
    if (data === "cities") {
        const cities = await City.find();
        if (!cities || cities.length === 0) {
            return await ctx.editMessageText(
                "<b>‚ùå –û—à–∏–±–∫–∞:</b> –ì–æ—Ä–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.",
                { parse_mode: "HTML" }
            );
        }

        const cityKeyboard = new InlineKeyboard();
        cities.forEach((city, index) => {
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –≥–æ—Ä–æ–¥–∞ –∏ –µ–≥–æ ID
            cityKeyboard.text(`üèôÔ∏è ${city.name}`, `city_${city._id}`);
            // –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –≤—Ç–æ—Ä–æ–π –∫–Ω–æ–ø–∫–∏ (–∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π) –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏
            if ((index + 1) % 2 === 0 || index === cities.length - 1) {
                cityKeyboard.row();
            }
        });
        // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
        cityKeyboard.row().text("‚ùå –ù–∞–∑–∞–¥", "menu");

        await ctx.editMessageText("<b>üåÜ –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:</b>", {
            reply_markup: cityKeyboard,
            parse_mode: "HTML",
        });
    } else if (data.startsWith("city_")) {
        const cityId = data.split("_")[1];
        session.cityId = cityId;

        // –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
        const uniqueProducts = await getUniqueProducts(cityId);

        if (uniqueProducts.length === 0) {
            return await ctx.answerCallbackQuery(
                "–í —ç—Ç–æ–º –≥–æ—Ä–æ–¥–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤"
            );
        }
        const uniqueProductsKeyboard = new InlineKeyboard();

        uniqueProducts.forEach((product) => {
            uniqueProductsKeyboard
                .text(`üì¶ ${product.name} (${product.rub_price} RUB)`, `product_${product.name}_${product.rub_price}`)
                .row();
        });
        uniqueProductsKeyboard.row().text("‚ùå –ù–∞–∑–∞–¥", "cities");
        return await ctx.editMessageText("<b>üõí –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:</b>", {
            reply_markup: uniqueProductsKeyboard,
            parse_mode: "HTML",
        });
    }

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ç–æ–≤–∞—Ä
    else if (data.startsWith("product_")) {
        const cityId = session.cityId;
        const productName = data.split("_")[1];
        const productRubPrice = data.split("_")[2];

        const product = await Product.findOne({
            name: productName,
            rub_price: productRubPrice,
            status: "available",
            city_id: cityId,
        });

        if (!product) {
            return await ctx.answerCallbackQuery(
                "–¢–æ–≤–∞—Ä —É–∂–µ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π"
            );
        }

        return await ctx.editMessageText(
            `<b>üì¶ –¢–æ–≤–∞—Ä:</b> "${product.name}"\n` +
                `<b>üí∏ –¶–µ–Ω–∞:</b> ${product.rub_price} RUB`,
            {
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: "üõí –ö—É–ø–∏—Ç—å",
                                callback_data: `purchase_${product.name}`,
                            },
                        ],
                        [
                            {
                                text: "‚ùå –ù–∞–∑–∞–¥",
                                callback_data: `city_${cityId}`,
                            },
                        ],
                    ],
                },
                parse_mode: "HTML",
            }
        );
    } else if (data.startsWith("purchase_")) {
        const configData = await Configuration.findOne();
        const cityId = session.cityId;
        const productName = data.split("_")[1];
        const product = await Product.findOne({
            name: productName,
            status: "available",
            city_id: cityId,
        });
        const tgUserId = ctx.callbackQuery.from.id;
        const userReservedPurchases = await Transaction.findOne({
            customer_tg_id: tgUserId,
            status: "pending",
        });

        if (userReservedPurchases) {
            return await ctx.answerCallbackQuery(
                "–£ –≤–∞—Å –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã.\n" +
                    "–ß—Ç–æ–±—ã –∫—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä, –æ–ø–ª–∞—Ç–∏—Ç–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–∫–∞–∑"
            );
        }
        if (!product || !configData) {
            return await ctx.answerCallbackQuery(
                "–¢–æ–≤–∞—Ä —É–∂–µ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π"
            );
        }

        session.productId = product.id;
        product.status = "reserved";
        product.reserved_at = new Date();
        await product.save();

        const transaction = new Transaction({
            customer_tg_id: ctx.from.id,
            product_id: product._id,
            btc_amount: generateUniqueAmount(product.btc_price),
            status: "pending",
        });
        await transaction.save();

        await ctx.reply(
            `<b>üìÖ –¢–æ–≤–∞—Ä "${product.name}" –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω.</b>\n\n` +
                `–û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>${transaction.btc_amount}</code> BTC –Ω–∞ –∞–¥—Ä–µ—Å: <code>${configData.btcAddress}</code>\n\n` +
                `–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É"\n` +
                `–¢–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑ –∏ –≤–∞—à–∏ –ø–æ–∫—É–ø–∫–∏ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –≤–æ –≤–∫–ª–∞–¥–∫–µ "<i>üõçÔ∏è –ú–æ–∏ –ø–æ–∫—É–ø–∫–∏</i>" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é`,
            {
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: "üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É",
                                callback_data: `check_${transaction._id}`,
                            },
                        ],
                        [
                            {
                                text: "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∫—É–ø–∫—É",
                                callback_data: `cancel_${transaction._id}`,
                            },
                        ],
                    ],
                },
                parse_mode: "HTML",
            }
        );

        return await ctx.answerCallbackQuery();
    } else if (data.startsWith("cancel_")) {
        const transactionId = data.split("_")[1];
        const productId = session.productId;
        await Transaction.deleteOne({ _id: transactionId });
        console.log("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞");
        await Product.updateOne(
            { _id: productId },
            { status: "available", reserved_at: null }
        );
        console.log("–¢–æ–≤–∞—Ä –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");

        await ctx.deleteMessage();
    }
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã
    else if (data.startsWith("check_")) {
        const cityId = session.cityId;
        const transactionId = data.split("_")[1];
        const transaction = await Transaction.findById(transactionId);
        if (transaction && transaction.status === "pending" && cityId) {
            // const { paid, tx_hash } = await checkPayment(
            // transaction.created_at,
            //     transaction.btc_amount
            // );
            const paid = true;
            if (paid) {
                // transaction.tx_hash = tx_hash;
                transaction.status = "completed";
                await transaction.save();
                const product = await Product.findById(transaction.product_id);
                if (product) {
                    product.status = "sold";
                    product.sold_at = new Date();
                    await product.save();
                    session.productId = null;
                    await ctx.editMessageText(
                        `<b>üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!</b>\n\n` +
                            `<b>üíé –í–∞—à —Ç–æ–≤–∞—Ä:</b> <code>${product.data}</code>`,
                        {
                            reply_markup: {
                                inline_keyboard: [
                                    [
                                        {
                                            text: "üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                                            callback_data: `menu`,
                                        },
                                    ],
                                ],
                            },
                            parse_mode: "HTML",
                        }
                    );
                }
            } else {
                await ctx.answerCallbackQuery("–û–ø–ª–∞—Ç–∞ –µ—â—ë –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞.");
            }
        }
    }

    // –û—Ç–º–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –º–µ–Ω—é
    else if (data === "menu") {
        return await sendMainMenu(ctx, "edit");

        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É "–ú–æ–∏ –ø–æ–∫—É–ø–∫–∏"
    } else if (data === "purchases") {
        const tgUserId = ctx.callbackQuery.from.id;
        const purchases = await Transaction.find({
            customer_tg_id: tgUserId,
            status: "completed",
        });

        if (purchases.length === 0) {
            return await ctx.answerCallbackQuery(
                "–í—ã –µ—â–µ –Ω–µ —Å–æ–≤–µ—Ä—à–∞–ª–∏ –ø–æ–∫—É–ø–æ–∫ –≤ –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ"
            );
        }

        const purchasesKeyboard = new InlineKeyboard();
        for (const transaction of purchases) {
            const productId = transaction.product_id;
            const product = await Product.findOne({
                _id: productId,
                status: "sold",
            });

            if (product) {
                purchasesKeyboard
                    .text(`‚úÖ ${product.name}`, `purchased_${product._id}`)
                    .row();
            }
        }
        purchasesKeyboard.row();
        purchasesKeyboard.text("‚ùå –ù–∞–∑–∞–¥", `menu`);
        return ctx.editMessageText(`<b>üõí –í–∞—à–∏ –ø–æ–∫—É–ø–∫–∏:</b>`, {
            reply_markup: purchasesKeyboard,
            parse_mode: "HTML",
        });

        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ç–æ–≤–∞—Ä –≤ —Å–≤–æ–∏—Ö –ø–æ–∫—É–ø–∫–∞—Ö
    } else if (data.startsWith("purchased_")) {
        const productId = data.split("_")[1];
        const product = await Product.findById(productId);

        if (!product) {
            return ctx.answerCallbackQuery(
                "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ"
            );
        }
        return ctx.editMessageText(
            `<b>üíé –í–∞—à —Ç–æ–≤–∞—Ä:</b> <code>${product.data}</code>`,
            {
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: "‚ùå –ù–∞–∑–∞–¥",
                                callback_data: `purchases`,
                            },
                        ],
                    ],
                },
                parse_mode: "HTML",
            }
        );
    } else if (data === "admin_panel") {
        if (!session.isAdmin) {
            session.adminStep = "password_input";

            return await ctx.editMessageText(
                "üîë <b>–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞ –Ω–∏–∂–µ</b>",
                {
                    reply_markup: {
                        inline_keyboard: [
                            [
                                {
                                    text: "‚ùå –ù–∞–∑–∞–¥",
                                    callback_data: `menu`,
                                },
                            ],
                        ],
                    },
                    parse_mode: "HTML",
                }
            );
        }

        return await sendAdminMenu(ctx, "edit");
    }
});

bot.on("message", async (ctx) => {
    const session = ctx.session;

    if (session.adminStep === "password_input") {
        const inputedPassword = ctx.message.text;
        const isPasswordValid = (await Configuration.findOne({
            adminPassword: inputedPassword,
        }))
            ? true
            : false;

        if (session.botLastMessageId) {
            ctx.deleteMessage();
            ctx.api.deleteMessage(ctx.chat.id, session.botLastMessageId);
            session.botLastMessageId = null;
        }

        if (isPasswordValid) {
            session.isAdmin = true;
            return await sendAdminMenu(ctx);
        }

        return await ctx.reply(`<b>‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞</b>`, {
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: "‚ùå –ù–∞–∑–∞–¥",
                            callback_data: `menu`,
                        },
                    ],
                ],
            },
            parse_mode: "HTML",
        });
    }
    return await ctx.reply(
        `<b>‚ùì –ù–µ –ø–æ–Ω—è–ª –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã</b>\n\n–ß—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –Ω–∞–≤–∏–≥–∞—Ü–∏–∏, –≤–≤–µ–¥–∏—Ç–µ /start`,
        {
            parse_mode: "HTML",
        }
    );
});

bot.catch((err) => {
    console.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ:\n", err);
});

bot.start();
