
import { ExtendedContext } from "../types";
import { Transaction, Product } from "../../database/models"
import { InferSchemaType, Document } from "mongoose";

const transactionSchema = Transaction.schema;
const productSchema = Product.schema;

type TransactionType = InferSchemaType<typeof transactionSchema> & Document;
type ProductType = InferSchemaType<typeof productSchema> & Document;

async function sendInvoicePayable(ctx: ExtendedContext, transaction: TransactionType, product: ProductType, btcAddressToPay: string) {
            
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è "–û–ø–ª–∞—Ç–∏—Ç—å –¥–æ" (30 –º–∏–Ω—É—Ç –æ—Ç created_at)
            const createdAt = new Date(transaction.created_at); // –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –≤ UTC
            const expiresAt = new Date(createdAt.getTime() + 30 * 60 * 1000); // +30 –º–∏–Ω—É—Ç –≤ UTC
    
            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤ –ú–°–ö (UTC+3)
            const expiresAtFormatted =
                expiresAt.toLocaleTimeString("ru-RU", {
                    timeZone: "Europe/Moscow",
                    hour12: false,
                    hour: "2-digit",
                    minute: "2-digit",
                }) + " –ü–û –ú–°–ö";
    
            return await ctx.editMessageText(
                `<b>üìÖ –¢–æ–≤–∞—Ä:</b> ${product.name}\n` +
                `<b>üÜî –ó–∞–∫–∞–∑ ‚Ññ:</b> <code>${transaction._id}</code>\n\n` +
                    `–û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>${transaction.btc_amount}</code> BTC –Ω–∞ –∞–¥—Ä–µ—Å: <code>${btcAddressToPay}</code>\n\n` +
                    `<b>–í–ê–ñ–ù–û!!! –û–ø–ª–∞—Ç–∏—Ç–µ –¥–æ ${expiresAtFormatted}</b>\n\n` +
                    `–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ <b>"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É"</b>\n` +
                    `–¢–µ–∫—É—â–∏–π –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏\n` +
                    `–≤–æ –≤–∫–ª–∞–¥–∫–µ <b>"üõçÔ∏è –ú–æ–∏ –∑–∞–∫–∞–∑—ã"</b> –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é`,
                {
                    reply_markup: {
                        inline_keyboard: [
                            [
                                {
                                    text: "üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É",
                                    callback_data: `check_${transaction._id}`,
                                },
                            ],
                            [
                                {
                                    text: "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∫—É–ø–∫—É",
                                    callback_data: `cancel_${transaction._id}`,
                                },
                            ],
                        ],
                    },
                    parse_mode: "HTML",
                }
            );
}

export default sendInvoicePayable;