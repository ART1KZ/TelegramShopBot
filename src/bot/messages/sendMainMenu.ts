import { ExtendedContext } from "../types";
import { InlineKeyboard } from "grammy";

async function sendMainMenu(
    ctx: ExtendedContext,
    option: "create" | "edit" = "create"
) {
    const session = ctx.session;
    session.cityId = null;
    const botMessage = `
<b>‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω! ‚ú®</b>

–ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥—ë—Ç–µ –≤—Å—ë –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª 
    `; // –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –º–µ–Ω—é
    const menuKeyboard = new InlineKeyboard()
        .text("üõçÔ∏è –ú–æ–∏ –∑–∞–∫–∞–∑—ã", "orders")
        .text("üõí –¢–æ–≤–∞—Ä—ã", "cities")
        .text("‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", "admin_panel")
        .row()
        .url("‚≠êÔ∏è –û—Ç–∑—ã–≤—ã", "https://t.me/+G8pMGy5LR-1hNjJi") // –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –æ—Ç–∑—ã–≤—ã
        .url("üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", "https://t.me/brotanchikJA"); // –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É

    if (option === "edit") {
        return await ctx.editMessageText(botMessage, {
            reply_markup: menuKeyboard,
            parse_mode: "HTML",
        });
    }

    // –ï—Å–ª–∏ —Å–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–µ
    if (session.botLastMessageId) {
        if (ctx?.chat?.id) {
            try {
                if (session.userStartMessageId) {
                    await ctx.api.deleteMessage(
                        ctx.chat.id,
                        session.userStartMessageId
                    );
                }

                await ctx.api.deleteMessage(
                    ctx.chat.id,
                    session.botLastMessageId
                );
                session.botLastMessageId = null;
            } catch (e) {
                console.warn(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞:",
                    e
                );
            }
        }
    }

    const sendedMessageId = await ctx
        .reply(botMessage, {
            reply_markup: menuKeyboard,
            parse_mode: "HTML",
        })
        .then((message) => message.message_id);
    
    // –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∫–æ–º–∞–Ω–¥—ã start –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (ctx.message?.message_id) {
        session.userStartMessageId = ctx.message.message_id;
    }

    return (ctx.session.botLastMessageId = sendedMessageId);
}

export default sendMainMenu;
