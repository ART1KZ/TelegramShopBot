import { Conversation } from "@grammyjs/conversations";
import { Context, InlineKeyboard } from "grammy";
import { Category, City, Product } from "../../database/models";
import { Types } from "mongoose";

async function buyProduct(conversation: Conversation, ctx: Context) {
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–æ–≤
    const cities = await City.find();
    if (!cities || cities.length === 0) {
        await ctx.reply("üòî –ì–æ—Ä–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
        return;
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —Å –≥–æ—Ä–æ–¥–∞–º–∏
    const citiesKeyboard = new InlineKeyboard();
    cities.forEach((city) => {
        citiesKeyboard.text(`üåÜ ${city.name}`, `city_${city._id}`).row();
    });
    citiesKeyboard.text("‚ùå –û—Ç–º–µ–Ω–∞", "cancel");

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await ctx.reply("üèôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", { reply_markup: citiesKeyboard });

    // –ñ–¥–µ–º –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const cityAction = await conversation.waitFor("callback_query:data");
    const cityData = cityAction.callbackQuery.data;

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (cityData === "cancel") {
        return;
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –≥–æ—Ä–æ–¥–∞ –∏–∑ callback_data
    const cityId = cityData.replace("city_", "");
    const selectedCity = cities.find((city) => city._id.toString() === cityId);

    if (!selectedCity) {
        await ctx.reply("‚ö†Ô∏è –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
        return;
    }

    type AvailableCategory = {
        _id: Types.ObjectId;
        city_id: Types.ObjectId;
        products_count: Number;
    };

    async function getAvailableCategories(): Promise<AvailableCategory[]> {
        const result = await Product.aggregate([
            // –§–∏–ª—å—Ç—Ä —Ç–æ–ª—å–∫–æ –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã (–Ω–µ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ)
            { $match: { status: "available" } },

            // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ category_id —Å –ø–æ–¥—Å—á–µ—Ç–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            {
                $group: {
                    _id: "$category_id",
                    products_count: { $sum: 1 },
                },
            },
        ]);

        return result as AvailableCategory[];
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –≥–¥–µ –µ—Å—Ç—å —Ç–æ–≤–∞—Ä—ã –≤ –Ω–∞–ª–∏—á–∏–∏
    const availableCategories = await getAvailableCategories();
    console.log(availableCategories)
    const categories = await Category.find({
        _id: { $in: availableCategories.map((category) => category._id) },
    });
    if (!categories || categories.length === 0) {
        await ctx.reply("üòî –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
        return;
    }

    const categoriesKeyboard = new InlineKeyboard();
    categories.forEach((category) => {
        const productsCount = availableCategories.find(
            (category) => category._id === category._id
        )?.products_count;
        categoriesKeyboard
            .text(
                `${category.name} (${productsCount} —à—Ç.)`,
                `cat_${category._id}`
            )
            .row();
    });

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –≤—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞
    await ctx.reply(`–ì–æ—Ä–æ–¥: üåÜ ${selectedCity.name}\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –ø–æ–∫—É–ø–∫–∏`, {
        reply_markup: categoriesKeyboard,
    });
}

export default buyProduct;
